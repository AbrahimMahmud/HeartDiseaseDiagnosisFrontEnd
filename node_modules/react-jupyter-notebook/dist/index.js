'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var SyntaxHighlighter = require('react-syntax-highlighter');
var ReactMarkdown = require('react-markdown');
var RemarkGFM = require('remark-gfm');
var RemarkMath = require('remark-math');
var RehypeKatex = require('rehype-katex');
require('katex/dist/katex.min.css');
var hljs = require('react-syntax-highlighter/dist/esm/styles/hljs');
var Ansi = require('ansi-to-react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var SyntaxHighlighter__default = /*#__PURE__*/_interopDefaultLegacy(SyntaxHighlighter);
var ReactMarkdown__default = /*#__PURE__*/_interopDefaultLegacy(ReactMarkdown);
var RemarkGFM__default = /*#__PURE__*/_interopDefaultLegacy(RemarkGFM);
var RemarkMath__default = /*#__PURE__*/_interopDefaultLegacy(RemarkMath);
var RehypeKatex__default = /*#__PURE__*/_interopDefaultLegacy(RehypeKatex);
var hljs__namespace = /*#__PURE__*/_interopNamespace(hljs);
var Ansi__default = /*#__PURE__*/_interopDefaultLegacy(Ansi);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var hljsStyles = {
    'a11yDark': hljs__namespace.a11yDark,
    'a11yLight': hljs__namespace.a11yLight,
    'agate': hljs__namespace.agate,
    'anOldHope': hljs__namespace.anOldHope,
    'androidstudio': hljs__namespace.androidstudio,
    'arduinoLight': hljs__namespace.arduinoLight,
    'arta': hljs__namespace.arta,
    'ascetic': hljs__namespace.ascetic,
    'atelierCaveDark': hljs__namespace.atelierCaveDark,
    'atelierCaveLight': hljs__namespace.atelierCaveLight,
    'atelierDuneDark': hljs__namespace.atelierDuneDark,
    'atelierDuneLight': hljs__namespace.atelierDuneLight,
    'atelierEstuaryDark': hljs__namespace.atelierEstuaryDark,
    'atelierEstuaryLight': hljs__namespace.atelierEstuaryLight,
    'atelierForestDark': hljs__namespace.atelierForestDark,
    'atelierForestLight': hljs__namespace.atelierForestLight,
    'atelierHeathDark': hljs__namespace.atelierHeathDark,
    'atelierHeathLight': hljs__namespace.atelierHeathLight,
    'atelierLakesideDark': hljs__namespace.atelierLakesideDark,
    'atelierLakesideLight': hljs__namespace.atelierLakesideLight,
    'atelierPlateauDark': hljs__namespace.atelierPlateauDark,
    'atelierPlateauLight': hljs__namespace.atelierPlateauLight,
    'atelierSavannaDark': hljs__namespace.atelierSavannaDark,
    'atelierSavannaLight': hljs__namespace.atelierSavannaLight,
    'atelierSeasideDark': hljs__namespace.atelierSeasideDark,
    'atelierSeasideLight': hljs__namespace.atelierSeasideLight,
    'atelierSulphurpoolDark': hljs__namespace.atelierSulphurpoolDark,
    'atelierSulphurpoolLight': hljs__namespace.atelierSulphurpoolLight,
    'atomOneDarkReasonable': hljs__namespace.atomOneDarkReasonable,
    'atomOneDark': hljs__namespace.atomOneDark,
    'atomOneLight': hljs__namespace.atomOneLight,
    'brownPaper': hljs__namespace.brownPaper,
    'codepenEmbed': hljs__namespace.codepenEmbed,
    'colorBrewer': hljs__namespace.colorBrewer,
    'darcula': hljs__namespace.darcula,
    'dark': hljs__namespace.dark,
    'defaultStyle': hljs__namespace.defaultStyle,
    'docco': hljs__namespace.docco,
    'dracula': hljs__namespace.dracula,
    'far': hljs__namespace.far,
    'foundation': hljs__namespace.foundation,
    'githubGist': hljs__namespace.githubGist,
    'github': hljs__namespace.github,
    'gml': hljs__namespace.gml,
    'googlecode': hljs__namespace.googlecode,
    'gradientDark': hljs__namespace.gradientDark,
    'grayscale': hljs__namespace.grayscale,
    'gruvboxDark': hljs__namespace.gruvboxDark,
    'gruvboxLight': hljs__namespace.gruvboxLight,
    'hopscotch': hljs__namespace.hopscotch,
    'hybrid': hljs__namespace.hybrid,
    'idea': hljs__namespace.idea,
    'irBlack': hljs__namespace.irBlack,
    'isblEditorDark': hljs__namespace.isblEditorDark,
    'isblEditorLight': hljs__namespace.isblEditorLight,
    'kimbieDark': hljs__namespace.kimbieDark,
    'kimbieLight': hljs__namespace.kimbieLight,
    'lightfair': hljs__namespace.lightfair,
    'lioshi': hljs__namespace.lioshi,
    'magula': hljs__namespace.magula,
    'monoBlue': hljs__namespace.monoBlue,
    'monokaiSublime': hljs__namespace.monokaiSublime,
    'monokai': hljs__namespace.monokai,
    'nightOwl': hljs__namespace.nightOwl,
    'nnfxDark': hljs__namespace.nnfxDark,
    'nnfx': hljs__namespace.nnfx,
    'nord': hljs__namespace.nord,
    'obsidian': hljs__namespace.obsidian,
    'ocean': hljs__namespace.ocean,
    'paraisoDark': hljs__namespace.paraisoDark,
    'paraisoLight': hljs__namespace.paraisoLight,
    'pojoaque': hljs__namespace.pojoaque,
    'purebasic': hljs__namespace.purebasic,
    'qtcreatorDark': hljs__namespace.qtcreatorDark,
    'qtcreatorLight': hljs__namespace.qtcreatorLight,
    'railscasts': hljs__namespace.railscasts,
    'rainbow': hljs__namespace.rainbow,
    'routeros': hljs__namespace.routeros,
    'schoolBook': hljs__namespace.schoolBook,
    'shadesOfPurple': hljs__namespace.shadesOfPurple,
    'solarizedDark': hljs__namespace.solarizedDark,
    'solarizedLight': hljs__namespace.solarizedLight,
    'srcery': hljs__namespace.srcery,
    'sunburst': hljs__namespace.sunburst,
    'tomorrowNightBlue': hljs__namespace.tomorrowNightBlue,
    'tomorrowNightBright': hljs__namespace.tomorrowNightBright,
    'tomorrowNightEighties': hljs__namespace.tomorrowNightEighties,
    'tomorrowNight': hljs__namespace.tomorrowNight,
    'tomorrow': hljs__namespace.tomorrow,
    'vs': hljs__namespace.vs,
    'vs2015': hljs__namespace.vs2015,
    'xcode': hljs__namespace.xcode,
    'xt256': hljs__namespace.xt256,
    'zenburn': hljs__namespace.zenburn,
};

function BlockSource(props) {
    var metadata = props.cell['metadata'];
    var source = props.cell['source'];
    var type = props.cell['cell_type'];
    var _a = react.useState({
        prevDisplay: 1,
        display: 1,
        contentHeight: 0,
    }), state = _a[0], setState = _a[1];
    if (props.display !== state.prevDisplay) {
        var newDisplay = props.display;
        if (newDisplay === -1) {
            if (metadata['jupyter'] !== undefined && metadata['jupyter']['source_hidden']) {
                newDisplay = 0;
            }
        }
        setState(__assign(__assign({}, state), { prevDisplay: props.display, display: newDisplay }));
    }
    var htmlContent;
    var executionCount;
    if (type === 'code') {
        executionCount = props.cell['execution_count'];
        // SyntaxHighlighter originally doesn't separate the line numbers and the codes.
        // The first SyntaxHighlighter is used to show line numbers only and the second is to show codes only.
        var _b = props.codeBlockStyles
            || {}, hljsStyle = _b.hljsStyle, lineNumberStyle = _b.lineNumberStyle, lineNumberContainerStyle = _b.lineNumberContainerStyle, codeContainerStyle = _b.codeContainerStyle;
        htmlContent = (jsxRuntime.jsxs("div", __assign({ className: "cell-content source-code" }, { children: [!props.showLineNumbers ? null :
                    jsxRuntime.jsx(SyntaxHighlighter__default["default"], __assign({ language: props.language, style: hljsStyle ? hljsStyles[hljsStyle] : hljsStyles.vs, codeTagProps: {
                            style: {
                                fontFamily: "Menlo, Consolas, 'DejaVu Sans Mono', monospace",
                                fontSize: "13px",
                            }
                        }, customStyle: hljsStyle ? lineNumberContainerStyle : {
                            width: "37px",
                            margin: "0 0 0 0",
                            padding: "5px 0 5px 0",
                            boxSizing: "border-box",
                            background: "#EEEEEE",
                            border: "solid 1px #E0E0E0",
                            overflow: "hidden",
                        }, showLineNumbers: true, lineNumberStyle: hljsStyle ? lineNumberStyle : {
                            width: "37px",
                            padding: "0 8px 0 8px",
                            boxSizing: "border-box",
                            color: "#999999",
                        } }, { children: !source ? null : source.map(function (item, index) { return index === 0 ? ' ' : '\n'; }).join('') })), jsxRuntime.jsx("div", __assign({ className: "source-code-main" }, { children: jsxRuntime.jsx(SyntaxHighlighter__default["default"], __assign({ language: props.language, style: hljsStyle ? hljsStyles[hljsStyle] : hljsStyles.vs, codeTagProps: {
                            style: {
                                fontFamily: "Menlo, Consolas, 'DejaVu Sans Mono', monospace",
                                fontSize: "13px",
                            }
                        }, customStyle: hljsStyle ? codeContainerStyle : {
                            margin: "0 0 0 0",
                            padding: "5px 4px 5px 4px",
                            boxSizing: "border-box",
                            background: "#F5F5F5",
                            border: "solid 1px #E0E0E0",
                            flex: 1,
                        } }, { children: !source ? null : source.join('') })) }))] })));
    }
    else if (type === 'markdown') {
        // '$$' has to be in a separate new line to be rendered as a block math equation.
        var re = /\n?\s*\$\$\s*\n?/g;
        var newSource = !source ? '' : source.join('').replaceAll(re, "\n$$$\n");
        htmlContent = (jsxRuntime.jsx("div", __assign({ className: "cell-content source-markdown" }, { children: jsxRuntime.jsx(ReactMarkdown__default["default"], __assign({ remarkPlugins: [RemarkGFM__default["default"], RemarkMath__default["default"]], rehypePlugins: [RehypeKatex__default["default"]] }, { children: newSource })) })));
    }
    else {
        htmlContent = (jsxRuntime.jsx("div", { children: "Cell Type ".concat(type, " not supported...") }));
    }
    return (jsxRuntime.jsxs("div", __assign({ className: "block-source" }, { children: [jsxRuntime.jsx("div", { className: props.highlighted ? "block-light-selected" : "block-light", onClick: function () {
                    setState(__assign(__assign({}, state), { display: (state.display + 1) % 2 }));
                } }), state.display === 0 ? jsxRuntime.jsx("div", { className: "block-hidden" }) :
                jsxRuntime.jsxs("div", __assign({ className: "cell-row" }, { children: [jsxRuntime.jsx("pre", __assign({ className: "cell-header source" }, { children: executionCount ? "[".concat(executionCount, "]: ") : null })), htmlContent] }))] })));
}

function BlockOutput(props) {
    var metadata = props.cell['metadata'];
    var outputs = props.cell['outputs'];
    var _a = react.useState({
        highlighted: false,
        prevDisplay: 1,
        display: 1,
        contentHeight: 0,
    }), state = _a[0], setState = _a[1];
    var contentRef = react.useCallback(function (node) {
        if (node) {
            setState(function (state) { return (__assign(__assign({}, state), { contentHeight: node.offsetHeight })); });
        }
    }, []);
    if (props.display !== state.prevDisplay) {
        var newDisplay = props.display;
        if (newDisplay === -1) {
            if (metadata['collapsed'] || (metadata['jupyter'] !== undefined && metadata['jupyter']['outputs_hidden'])) {
                newDisplay = 0;
            }
            else if (metadata['scrolled']) {
                newDisplay = 2;
            }
        }
        setState(__assign(__assign({}, state), { prevDisplay: props.display, display: newDisplay }));
    }
    return (jsxRuntime.jsxs("div", __assign({ className: "block-output" }, { children: [jsxRuntime.jsx("div", { className: props.highlighted ? "block-light-selected" : "block-light", onClick: function () {
                    setState(__assign(__assign({}, state), { display: (state.display + 1) % 3 }));
                } }), state.display === 0 ? jsxRuntime.jsx("div", { className: "block-hidden" }) :
                jsxRuntime.jsx("div", __assign({ className: "block-output-content", style: state.display !== 2 ? undefined : {
                        maxHeight: state.contentHeight,
                        height: 200,
                        boxShadow: "inset 0 0 6px 2px rgb(0 0 0 / 30%)",
                        resize: "vertical",
                    } }, { children: jsxRuntime.jsx("div", __assign({ ref: contentRef }, { children: !outputs ? null : outputs.map(function (output, index) {
                            var executionCount;
                            var htmlContent;
                            if ('output_type' in output) {
                                var output_type = output['output_type'];
                                switch (output_type) {
                                    // Stdout and stderr
                                    case 'stream':
                                        htmlContent = (jsxRuntime.jsx("pre", __assign({ className: "cell-content ".concat(output['name'] === 'stdout' ? 'output-std' : 'output-err') }, { children: !output['text'] ? '' : output['text'].join('') })));
                                        break;
                                    // Output with execution_count
                                    // @ts-expect-error
                                    case 'execute_result':
                                        executionCount = output['execution_count'];
                                    // Output without execution_count
                                    case 'display_data':
                                        var output_data = output['data'];
                                        if (output_data) {
                                            if ('image/png' in output_data) {
                                                var output_metadata = output['metadata'];
                                                var size = output_metadata && output_metadata['image/png'];
                                                htmlContent = (jsxRuntime.jsx("div", __assign({ className: "cell-content output-display", style: {
                                                        justifyContent: props.mediaAlign,
                                                    } }, { children: jsxRuntime.jsx("img", { src: "data:image/png;base64,".concat(output_data['image/png']), width: size ? size['width'] : 'auto', height: size ? size['height'] : 'auto', alt: "" }) })));
                                            }
                                            else if ('text/html' in output_data) {
                                                htmlContent = (jsxRuntime.jsx("div", { className: "cell-content output-display", style: {
                                                        justifyContent: props.mediaAlign,
                                                    }, dangerouslySetInnerHTML: { __html: output_data['text/html'].join('') } }));
                                            }
                                            else if ('text/plain' in output_data) {
                                                htmlContent = (jsxRuntime.jsx("pre", __assign({ className: "cell-content output-std" }, { children: output_data['text/plain'].join('') })));
                                            }
                                        }
                                        break;
                                    // Exceptions
                                    case 'error':
                                        htmlContent = (jsxRuntime.jsx("pre", __assign({ className: "cell-content output-err" }, { children: jsxRuntime.jsx(Ansi__default["default"], { children: !output.traceback ? undefined : output.traceback.join('\n') }) })));
                                        break;
                                    default:
                                        console.log('Unexpected output_type: ', output_type);
                                }
                            }
                            return (jsxRuntime.jsxs("div", __assign({ className: "cell-row" }, { children: [jsxRuntime.jsx("pre", __assign({ className: "cell-header output" }, { children: executionCount ? "[".concat(executionCount, "]: ") : null })), htmlContent] }), index));
                        }) })) }))] })));
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "blockquote {\n  border-left: 0.5em #eee solid; }\n\n.jupyter-viewer {\n  width: 100%;\n  height: 100%; }\n\n.block {\n  padding: 5px 5px 5px 5px;\n  box-sizing: border-box;\n  overflow: hidden; }\n  .block .block-hidden {\n    width: 100%;\n    min-height: 20px; }\n  .block .block-source {\n    width: 100%;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: row; }\n  .block .block-output {\n    width: 100%;\n    margin: 5px 0 0 0;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: row; }\n    .block .block-output .block-output-content {\n      width: 100%;\n      overflow-y: auto; }\n  .block .block-light {\n    width: 8px;\n    margin: 0 5px 0 0;\n    border-radius: 2px;\n    background-color: rgba(66, 165, 245, 0); }\n    .block .block-light:hover {\n      background-color: rgba(66, 165, 245, 0.75); }\n  .block .block-light-selected {\n    width: 8px;\n    margin: 0 5px 0 0;\n    border-radius: 2px;\n    background-color: #42a5f5; }\n    .block .block-light-selected:hover {\n      background-color: #0b72c6; }\n  .block .cell-row {\n    width: 100%;\n    display: flex;\n    flex-direction: row; }\n    .block .cell-row .cell-header {\n      width: 64px;\n      margin: 0 0 0 0;\n      padding: 5px 0 0 5px;\n      box-sizing: border-box;\n      text-align: right; }\n      .block .cell-row .cell-header.source {\n        color: #307fc1; }\n      .block .cell-row .cell-header.output {\n        color: #bf5b3d; }\n    .block .cell-row .cell-content {\n      width: 100%;\n      margin: 0 0 0 0;\n      box-sizing: border-box;\n      flex: 1; }\n      .block .cell-row .cell-content.source-code {\n        display: flex;\n        flex-direction: row; }\n        .block .cell-row .cell-content.source-code .source-code-main {\n          flex: 1; }\n      .block .cell-row .cell-content.source-markdown {\n        padding: 0 20px 0 5px;\n        box-sizing: border-box;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n        font-size: 14px; }\n      .block .cell-row .cell-content.output-std {\n        padding: 5px 0 0 5px;\n        box-sizing: border-box; }\n      .block .cell-row .cell-content.output-err {\n        padding: 5px 0 0 5px;\n        box-sizing: border-box;\n        background-color: #FFDDDD; }\n      .block .cell-row .cell-content.output-display {\n        display: flex;\n        flex-direction: row; }\n";
styleInject(css_248z);

// -1: auto, 0: hide, 1: show, 2: scroll
var DISPLAYS = ['hide', 'show', 'scroll'];
function JupyterViewer(props) {
    var rawIpynb = props.rawIpynb, _a = props.language, language = _a === void 0 ? 'python' : _a, _b = props.showLineNumbers, showLineNumbers = _b === void 0 ? true : _b, _c = props.mediaAlign, mediaAlign = _c === void 0 ? 'center' : _c, _d = props.displaySource, displaySource = _d === void 0 ? 'auto' : _d, _e = props.displayOutput, displayOutput = _e === void 0 ? 'auto' : _e, _f = props.codeBlockStyles, codeBlockStyles = _f === void 0 ? undefined : _f;
    var _g = react.useState({
        clickCellIndex: -1,
    }), state = _g[0], setState = _g[1];
    return (jsxRuntime.jsx("div", __assign({ className: "jupyter-viewer" }, { children: rawIpynb['cells'].map(function (cell, index) {
            return (jsxRuntime.jsxs("div", __assign({ className: "block", onMouseDown: function () {
                    setState(__assign(__assign({}, state), { clickCellIndex: index }));
                } }, { children: [!('cell_type' in cell) ? null :
                        jsxRuntime.jsx(BlockSource, { cell: cell, language: language, highlighted: state.clickCellIndex === index, display: DISPLAYS.indexOf(displaySource), showLineNumbers: showLineNumbers, codeBlockStyles: codeBlockStyles }), !('outputs' in cell) ? null :
                        jsxRuntime.jsx(BlockOutput, { cell: cell, highlighted: state.clickCellIndex === index, display: DISPLAYS.indexOf(displayOutput), mediaAlign: { left: 'flex-start', center: 'center', right: 'flex-end' }[mediaAlign] })] }), index));
        }) })));
}

module.exports = JupyterViewer;
//# sourceMappingURL=index.js.map
