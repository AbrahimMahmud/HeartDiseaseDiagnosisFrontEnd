{"ast":null,"code":"\"use strict\"; // This file was originally written by @drudru (https://github.com/drudru/ansi_up), MIT, 2011\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ANSI_COLORS = [[{\n  color: \"0, 0, 0\",\n  \"class\": \"ansi-black\"\n}, {\n  color: \"187, 0, 0\",\n  \"class\": \"ansi-red\"\n}, {\n  color: \"0, 187, 0\",\n  \"class\": \"ansi-green\"\n}, {\n  color: \"187, 187, 0\",\n  \"class\": \"ansi-yellow\"\n}, {\n  color: \"0, 0, 187\",\n  \"class\": \"ansi-blue\"\n}, {\n  color: \"187, 0, 187\",\n  \"class\": \"ansi-magenta\"\n}, {\n  color: \"0, 187, 187\",\n  \"class\": \"ansi-cyan\"\n}, {\n  color: \"255,255,255\",\n  \"class\": \"ansi-white\"\n}], [{\n  color: \"85, 85, 85\",\n  \"class\": \"ansi-bright-black\"\n}, {\n  color: \"255, 85, 85\",\n  \"class\": \"ansi-bright-red\"\n}, {\n  color: \"0, 255, 0\",\n  \"class\": \"ansi-bright-green\"\n}, {\n  color: \"255, 255, 85\",\n  \"class\": \"ansi-bright-yellow\"\n}, {\n  color: \"85, 85, 255\",\n  \"class\": \"ansi-bright-blue\"\n}, {\n  color: \"255, 85, 255\",\n  \"class\": \"ansi-bright-magenta\"\n}, {\n  color: \"85, 255, 255\",\n  \"class\": \"ansi-bright-cyan\"\n}, {\n  color: \"255, 255, 255\",\n  \"class\": \"ansi-bright-white\"\n}]];\n\nvar Anser = function () {\n  _createClass(Anser, null, [{\n    key: \"escapeForHtml\",\n\n    /**\n     * Anser.escapeForHtml\n     * Escape the input HTML.\n     *\n     * This does the minimum escaping of text to make it compliant with HTML.\n     * In particular, the '&','<', and '>' characters are escaped. This should\n     * be run prior to `ansiToHtml`.\n     *\n     * @name Anser.escapeForHtml\n     * @function\n     * @param {String} txt The input text (containing the ANSI snippets).\n     * @returns {String} The escaped html.\n     */\n    value: function escapeForHtml(txt) {\n      return new Anser().escapeForHtml(txt);\n    }\n    /**\n     * Anser.linkify\n     * Adds the links in the HTML.\n     *\n     * This replaces any links in the text with anchor tags that display the\n     * link. The links should have at least one whitespace character\n     * surrounding it. Also, you should apply this after you have run\n     * `ansiToHtml` on the text.\n     *\n     * @name Anser.linkify\n     * @function\n     * @param {String} txt The input text.\n     * @returns {String} The HTML containing the <a> tags (unescaped).\n     */\n\n  }, {\n    key: \"linkify\",\n    value: function linkify(txt) {\n      return new Anser().linkify(txt);\n    }\n    /**\n     * Anser.ansiToHtml\n     * This replaces ANSI terminal escape codes with SPAN tags that wrap the\n     * content.\n     *\n     * This function only interprets ANSI SGR (Select Graphic Rendition) codes\n     * that can be represented in HTML.\n     * For example, cursor movement codes are ignored and hidden from output.\n     * The default style uses colors that are very close to the prescribed\n     * standard. The standard assumes that the text will have a black\n     * background. These colors are set as inline styles on the SPAN tags.\n     *\n     * Another option is to set `use_classes: true` in the options argument.\n     * This will instead set classes on the spans so the colors can be set via\n     * CSS. The class names used are of the format `ansi-*-fg/bg` and\n     * `ansi-bright-*-fg/bg` where `*` is the color name,\n     * i.e black/red/green/yellow/blue/magenta/cyan/white.\n     *\n     * @name Anser.ansiToHtml\n     * @function\n     * @param {String} txt The input text.\n     * @param {Object} options The options passed to the ansiToHTML method.\n     * @returns {String} The HTML output.\n     */\n\n  }, {\n    key: \"ansiToHtml\",\n    value: function ansiToHtml(txt, options) {\n      return new Anser().ansiToHtml(txt, options);\n    }\n    /**\n     * Anser.ansiToJson\n     * Converts ANSI input into JSON output.\n     *\n     * @name Anser.ansiToJson\n     * @function\n     * @param {String} txt The input text.\n     * @param {Object} options The options passed to the ansiToHTML method.\n     * @returns {String} The HTML output.\n     */\n\n  }, {\n    key: \"ansiToJson\",\n    value: function ansiToJson(txt, options) {\n      return new Anser().ansiToJson(txt, options);\n    }\n    /**\n     * Anser.ansiToText\n     * Converts ANSI input into text output.\n     *\n     * @name Anser.ansiToText\n     * @function\n     * @param {String} txt The input text.\n     * @returns {String} The text output.\n     */\n\n  }, {\n    key: \"ansiToText\",\n    value: function ansiToText(txt) {\n      return new Anser().ansiToText(txt);\n    }\n    /**\n     * Anser\n     * The `Anser` class.\n     *\n     * @name Anser\n     * @function\n     * @returns {Anser}\n     */\n\n  }]);\n\n  function Anser() {\n    _classCallCheck(this, Anser);\n\n    this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;\n    this.bright = 0;\n  }\n  /**\n   * setupPalette\n   * Sets up the palette.\n   *\n   * @name setupPalette\n   * @function\n   */\n\n\n  _createClass(Anser, [{\n    key: \"setupPalette\",\n    value: function setupPalette() {\n      this.PALETTE_COLORS = []; // Index 0..15 : System color\n\n      for (var i = 0; i < 2; ++i) {\n        for (var j = 0; j < 8; ++j) {\n          this.PALETTE_COLORS.push(ANSI_COLORS[i][j].color);\n        }\n      } // Index 16..231 : RGB 6x6x6\n      // https://gist.github.com/jasonm23/2868981#file-xterm-256color-yaml\n\n\n      var levels = [0, 95, 135, 175, 215, 255];\n\n      var format = function format(r, g, b) {\n        return levels[r] + \", \" + levels[g] + \", \" + levels[b];\n      };\n\n      var r = void 0,\n          g = void 0,\n          b = void 0;\n\n      for (var _r = 0; _r < 6; ++_r) {\n        for (var _g = 0; _g < 6; ++_g) {\n          for (var _b = 0; _b < 6; ++_b) {\n            this.PALETTE_COLORS.push(format(_r, _g, _b));\n          }\n        }\n      } // Index 232..255 : Grayscale\n\n\n      var level = 8;\n\n      for (var _i = 0; _i < 24; ++_i, level += 10) {\n        this.PALETTE_COLORS.push(format(level, level, level));\n      }\n    }\n    /**\n     * escapeForHtml\n     * Escapes the input text.\n     *\n     * @name escapeForHtml\n     * @function\n     * @param {String} txt The input text.\n     * @returns {String} The escpaed HTML output.\n     */\n\n  }, {\n    key: \"escapeForHtml\",\n    value: function escapeForHtml(txt) {\n      return txt.replace(/[&<>]/gm, function (str) {\n        return str == \"&\" ? \"&amp;\" : str == \"<\" ? \"&lt;\" : str == \">\" ? \"&gt;\" : \"\";\n      });\n    }\n    /**\n     * linkify\n     * Adds HTML link elements.\n     *\n     * @name linkify\n     * @function\n     * @param {String} txt The input text.\n     * @returns {String} The HTML output containing link elements.\n     */\n\n  }, {\n    key: \"linkify\",\n    value: function linkify(txt) {\n      return txt.replace(/(https?:\\/\\/[^\\s]+)/gm, function (str) {\n        return \"<a href=\\\"\" + str + \"\\\">\" + str + \"</a>\";\n      });\n    }\n    /**\n     * ansiToHtml\n     * Converts ANSI input into HTML output.\n     *\n     * @name ansiToHtml\n     * @function\n     * @param {String} txt The input text.\n     * @param {Object} options The options passed ot the `process` method.\n     * @returns {String} The HTML output.\n     */\n\n  }, {\n    key: \"ansiToHtml\",\n    value: function ansiToHtml(txt, options) {\n      return this.process(txt, options, true);\n    }\n    /**\n     * ansiToJson\n     * Converts ANSI input into HTML output.\n     *\n     * @name ansiToJson\n     * @function\n     * @param {String} txt The input text.\n     * @param {Object} options The options passed ot the `process` method.\n     * @returns {String} The JSON output.\n     */\n\n  }, {\n    key: \"ansiToJson\",\n    value: function ansiToJson(txt, options) {\n      options = options || {};\n      options.json = true;\n      options.clearLine = false;\n      return this.process(txt, options, true);\n    }\n    /**\n     * ansiToText\n     * Converts ANSI input into HTML output.\n     *\n     * @name ansiToText\n     * @function\n     * @param {String} txt The input text.\n     * @returns {String} The text output.\n     */\n\n  }, {\n    key: \"ansiToText\",\n    value: function ansiToText(txt) {\n      return this.process(txt, {}, false);\n    }\n    /**\n     * process\n     * Processes the input.\n     *\n     * @name process\n     * @function\n     * @param {String} txt The input text.\n     * @param {Object} options An object passed to `processChunk` method, extended with:\n     *\n     *  - `json` (Boolean): If `true`, the result will be an object.\n     *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n     *\n     * @param {Boolean} markup\n     */\n\n  }, {\n    key: \"process\",\n    value: function process(txt, options, markup) {\n      var _this = this;\n\n      var self = this;\n      var raw_text_chunks = txt.split(/\\033\\[/);\n      var first_chunk = raw_text_chunks.shift(); // the first chunk is not the result of the split\n\n      if (options === undefined || options === null) {\n        options = {};\n      }\n\n      options.clearLine = /\\r/.test(txt); // check for Carriage Return\n\n      var color_chunks = raw_text_chunks.map(function (chunk) {\n        return _this.processChunk(chunk, options, markup);\n      });\n\n      if (options && options.json) {\n        var first = self.processChunkJson(\"\");\n        first.content = first_chunk;\n        first.clearLine = options.clearLine;\n        color_chunks.unshift(first);\n\n        if (options.remove_empty) {\n          color_chunks = color_chunks.filter(function (c) {\n            return !c.isEmpty();\n          });\n        }\n\n        return color_chunks;\n      } else {\n        color_chunks.unshift(first_chunk);\n      }\n\n      return color_chunks.join(\"\");\n    }\n    /**\n     * processChunkJson\n     * Processes the current chunk into json output.\n     *\n     * @name processChunkJson\n     * @function\n     * @param {String} text The input text.\n     * @param {Object} options An object containing the following fields:\n     *\n     *  - `json` (Boolean): If `true`, the result will be an object.\n     *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n     *\n     * @param {Boolean} markup If false, the colors will not be parsed.\n     * @return {Object} The result object:\n     *\n     *  - `content` (String): The text.\n     *  - `fg` (String|null): The foreground color.\n     *  - `bg` (String|null): The background color.\n     *  - `fg_truecolor` (String|null): The foreground true color (if 16m color is enabled).\n     *  - `bg_truecolor` (String|null): The background true color (if 16m color is enabled).\n     *  - `clearLine` (Boolean): `true` if a carriageReturn \\r was fount at end of line.\n     *  - `was_processed` (Bolean): `true` if the colors were processed, `false` otherwise.\n     *  - `isEmpty` (Function): A function returning `true` if the content is empty, or `false` otherwise.\n     *\n     */\n\n  }, {\n    key: \"processChunkJson\",\n    value: function processChunkJson(text, options, markup) {\n      // Are we using classes or styles?\n      options = typeof options == \"undefined\" ? {} : options;\n      var use_classes = options.use_classes = typeof options.use_classes != \"undefined\" && options.use_classes;\n      var key = options.key = use_classes ? \"class\" : \"color\";\n      var result = {\n        content: text,\n        fg: null,\n        bg: null,\n        fg_truecolor: null,\n        bg_truecolor: null,\n        clearLine: options.clearLine,\n        decoration: null,\n        was_processed: false,\n        isEmpty: function isEmpty() {\n          return !result.content;\n        }\n      }; // Each \"chunk\" is the text after the CSI (ESC + \"[\") and before the next CSI/EOF.\n      //\n      // This regex matches four groups within a chunk.\n      //\n      // The first and third groups match code type.\n      // We supported only SGR command. It has empty first group and \"m\" in third.\n      //\n      // The second group matches all of the number+semicolon command sequences\n      // before the \"m\" (or other trailing) character.\n      // These are the graphics or SGR commands.\n      //\n      // The last group is the text (including newlines) that is colored by\n      // the other group\"s commands.\n\n      var matches = text.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);\n      if (!matches) return result;\n      var orig_txt = result.content = matches[4];\n      var nums = matches[2].split(\";\"); // We currently support only \"SGR\" (Select Graphic Rendition)\n      // Simply ignore if not a SGR command.\n\n      if (matches[1] !== \"\" || matches[3] !== \"m\") {\n        return result;\n      }\n\n      if (!markup) {\n        return result;\n      }\n\n      var self = this;\n      self.decoration = null;\n\n      while (nums.length > 0) {\n        var num_str = nums.shift();\n        var num = parseInt(num_str);\n\n        if (isNaN(num) || num === 0) {\n          self.fg = self.bg = self.decoration = null;\n        } else if (num === 1) {\n          self.decoration = \"bold\";\n        } else if (num === 2) {\n          self.decoration = \"dim\"; // Enable code 2 to get string\n        } else if (num == 3) {\n          self.decoration = \"italic\";\n        } else if (num == 4) {\n          self.decoration = \"underline\";\n        } else if (num == 5) {\n          self.decoration = \"blink\";\n        } else if (num === 7) {\n          self.decoration = \"reverse\";\n        } else if (num === 8) {\n          self.decoration = \"hidden\"; // Enable code 9 to get strikethrough\n        } else if (num === 9) {\n          self.decoration = \"strikethrough\";\n        } else if (num == 39) {\n          self.fg = null;\n        } else if (num == 49) {\n          self.bg = null; // Foreground color\n        } else if (num >= 30 && num < 38) {\n          self.fg = ANSI_COLORS[0][num % 10][key]; // Foreground bright color\n        } else if (num >= 90 && num < 98) {\n          self.fg = ANSI_COLORS[1][num % 10][key]; // Background color\n        } else if (num >= 40 && num < 48) {\n          self.bg = ANSI_COLORS[0][num % 10][key]; // Background bright color\n        } else if (num >= 100 && num < 108) {\n          self.bg = ANSI_COLORS[1][num % 10][key];\n        } else if (num === 38 || num === 48) {\n          // extend color (38=fg, 48=bg)\n          var is_foreground = num === 38;\n\n          if (nums.length >= 1) {\n            var mode = nums.shift();\n\n            if (mode === \"5\" && nums.length >= 1) {\n              // palette color\n              var palette_index = parseInt(nums.shift());\n\n              if (palette_index >= 0 && palette_index <= 255) {\n                if (!use_classes) {\n                  if (!this.PALETTE_COLORS) {\n                    self.setupPalette();\n                  }\n\n                  if (is_foreground) {\n                    self.fg = this.PALETTE_COLORS[palette_index];\n                  } else {\n                    self.bg = this.PALETTE_COLORS[palette_index];\n                  }\n                } else {\n                  var klass = palette_index >= 16 ? \"ansi-palette-\" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8][\"class\"];\n\n                  if (is_foreground) {\n                    self.fg = klass;\n                  } else {\n                    self.bg = klass;\n                  }\n                }\n              }\n            } else if (mode === \"2\" && nums.length >= 3) {\n              // true color\n              var r = parseInt(nums.shift());\n              var g = parseInt(nums.shift());\n              var b = parseInt(nums.shift());\n\n              if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {\n                var color = r + \", \" + g + \", \" + b;\n\n                if (!use_classes) {\n                  if (is_foreground) {\n                    self.fg = color;\n                  } else {\n                    self.bg = color;\n                  }\n                } else {\n                  if (is_foreground) {\n                    self.fg = \"ansi-truecolor\";\n                    self.fg_truecolor = color;\n                  } else {\n                    self.bg = \"ansi-truecolor\";\n                    self.bg_truecolor = color;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (self.fg === null && self.bg === null && self.decoration === null) {\n        return result;\n      } else {\n        var styles = [];\n        var classes = [];\n        var data = {};\n        result.fg = self.fg;\n        result.bg = self.bg;\n        result.fg_truecolor = self.fg_truecolor;\n        result.bg_truecolor = self.bg_truecolor;\n        result.decoration = self.decoration;\n        result.was_processed = true;\n        return result;\n      }\n    }\n    /**\n     * processChunk\n     * Processes the current chunk of text.\n     *\n     * @name processChunk\n     * @function\n     * @param {String} text The input text.\n     * @param {Object} options An object containing the following fields:\n     *\n     *  - `json` (Boolean): If `true`, the result will be an object.\n     *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n     *\n     * @param {Boolean} markup If false, the colors will not be parsed.\n     * @return {Object|String} The result (object if `json` is wanted back or string otherwise).\n     */\n\n  }, {\n    key: \"processChunk\",\n    value: function processChunk(text, options, markup) {\n      var _this2 = this;\n\n      var self = this;\n      options = options || {};\n      var jsonChunk = this.processChunkJson(text, options, markup);\n\n      if (options.json) {\n        return jsonChunk;\n      }\n\n      if (jsonChunk.isEmpty()) {\n        return \"\";\n      }\n\n      if (!jsonChunk.was_processed) {\n        return jsonChunk.content;\n      }\n\n      var use_classes = options.use_classes;\n      var styles = [];\n      var classes = [];\n      var data = {};\n\n      var render_data = function render_data(data) {\n        var fragments = [];\n        var key = void 0;\n\n        for (key in data) {\n          if (data.hasOwnProperty(key)) {\n            fragments.push(\"data-\" + key + \"=\\\"\" + _this2.escapeForHtml(data[key]) + \"\\\"\");\n          }\n        }\n\n        return fragments.length > 0 ? \" \" + fragments.join(\" \") : \"\";\n      };\n\n      if (jsonChunk.fg) {\n        if (use_classes) {\n          classes.push(jsonChunk.fg + \"-fg\");\n\n          if (jsonChunk.fg_truecolor !== null) {\n            data[\"ansi-truecolor-fg\"] = jsonChunk.fg_truecolor;\n            jsonChunk.fg_truecolor = null;\n          }\n        } else {\n          styles.push(\"color:rgb(\" + jsonChunk.fg + \")\");\n        }\n      }\n\n      if (jsonChunk.bg) {\n        if (use_classes) {\n          classes.push(jsonChunk.bg + \"-bg\");\n\n          if (jsonChunk.bg_truecolor !== null) {\n            data[\"ansi-truecolor-bg\"] = jsonChunk.bg_truecolor;\n            jsonChunk.bg_truecolor = null;\n          }\n        } else {\n          styles.push(\"background-color:rgb(\" + jsonChunk.bg + \")\");\n        }\n      }\n\n      if (jsonChunk.decoration) {\n        if (use_classes) {\n          classes.push(\"ansi-\" + jsonChunk.decoration);\n        } else if (jsonChunk.decoration === \"bold\") {\n          styles.push(\"font-weight:bold\");\n        } else if (jsonChunk.decoration === \"dim\") {\n          styles.push(\"opacity:0.5\");\n        } else if (jsonChunk.decoration === \"italic\") {\n          styles.push(\"font-style:italic\"); // underline and blink are treated bellow\n        } else if (jsonChunk.decoration === \"reverse\") {\n          styles.push(\"filter:invert(100%)\");\n        } else if (jsonChunk.decoration === \"hidden\") {\n          styles.push(\"visibility:hidden\");\n        } else if (jsonChunk.decoration === \"strikethrough\") {\n          styles.push(\"text-decoration:line-through\");\n        } else {\n          styles.push(\"text-decoration:\" + jsonChunk.decoration);\n        }\n      }\n\n      if (use_classes) {\n        return \"<span class=\\\"\" + classes.join(\" \") + \"\\\"\" + render_data(data) + \">\" + jsonChunk.content + \"</span>\";\n      } else {\n        return \"<span style=\\\"\" + styles.join(\";\") + \"\\\"\" + render_data(data) + \">\" + jsonChunk.content + \"</span>\";\n      }\n    }\n  }]);\n\n  return Anser;\n}();\n\n;\nmodule.exports = Anser;","map":{"version":3,"sources":["/Users/abrahimmahmud/IdeaProjects/HeartDiseaseDiagnosisFrontEnd/node_modules/anser/lib/index.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","ANSI_COLORS","color","Anser","value","escapeForHtml","txt","linkify","ansiToHtml","options","ansiToJson","ansiToText","fg","bg","fg_truecolor","bg_truecolor","bright","setupPalette","PALETTE_COLORS","j","push","levels","format","r","g","b","_r","_g","_b","level","_i","replace","str","process","json","clearLine","markup","_this","self","raw_text_chunks","split","first_chunk","shift","undefined","test","color_chunks","map","chunk","processChunk","first","processChunkJson","content","unshift","remove_empty","filter","c","isEmpty","join","text","use_classes","result","decoration","was_processed","matches","match","orig_txt","nums","num_str","num","parseInt","isNaN","is_foreground","mode","palette_index","klass","styles","classes","data","_this2","jsonChunk","render_data","fragments","hasOwnProperty","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// This file was originally written by @drudru (https://github.com/drudru/ansi_up), MIT, 2011\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ANSI_COLORS = [[{ color: \"0, 0, 0\", \"class\": \"ansi-black\" }, { color: \"187, 0, 0\", \"class\": \"ansi-red\" }, { color: \"0, 187, 0\", \"class\": \"ansi-green\" }, { color: \"187, 187, 0\", \"class\": \"ansi-yellow\" }, { color: \"0, 0, 187\", \"class\": \"ansi-blue\" }, { color: \"187, 0, 187\", \"class\": \"ansi-magenta\" }, { color: \"0, 187, 187\", \"class\": \"ansi-cyan\" }, { color: \"255,255,255\", \"class\": \"ansi-white\" }], [{ color: \"85, 85, 85\", \"class\": \"ansi-bright-black\" }, { color: \"255, 85, 85\", \"class\": \"ansi-bright-red\" }, { color: \"0, 255, 0\", \"class\": \"ansi-bright-green\" }, { color: \"255, 255, 85\", \"class\": \"ansi-bright-yellow\" }, { color: \"85, 85, 255\", \"class\": \"ansi-bright-blue\" }, { color: \"255, 85, 255\", \"class\": \"ansi-bright-magenta\" }, { color: \"85, 255, 255\", \"class\": \"ansi-bright-cyan\" }, { color: \"255, 255, 255\", \"class\": \"ansi-bright-white\" }]];\n\nvar Anser = function () {\n    _createClass(Anser, null, [{\n        key: \"escapeForHtml\",\n\n\n        /**\n         * Anser.escapeForHtml\n         * Escape the input HTML.\n         *\n         * This does the minimum escaping of text to make it compliant with HTML.\n         * In particular, the '&','<', and '>' characters are escaped. This should\n         * be run prior to `ansiToHtml`.\n         *\n         * @name Anser.escapeForHtml\n         * @function\n         * @param {String} txt The input text (containing the ANSI snippets).\n         * @returns {String} The escaped html.\n         */\n        value: function escapeForHtml(txt) {\n            return new Anser().escapeForHtml(txt);\n        }\n\n        /**\n         * Anser.linkify\n         * Adds the links in the HTML.\n         *\n         * This replaces any links in the text with anchor tags that display the\n         * link. The links should have at least one whitespace character\n         * surrounding it. Also, you should apply this after you have run\n         * `ansiToHtml` on the text.\n         *\n         * @name Anser.linkify\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The HTML containing the <a> tags (unescaped).\n         */\n\n    }, {\n        key: \"linkify\",\n        value: function linkify(txt) {\n            return new Anser().linkify(txt);\n        }\n\n        /**\n         * Anser.ansiToHtml\n         * This replaces ANSI terminal escape codes with SPAN tags that wrap the\n         * content.\n         *\n         * This function only interprets ANSI SGR (Select Graphic Rendition) codes\n         * that can be represented in HTML.\n         * For example, cursor movement codes are ignored and hidden from output.\n         * The default style uses colors that are very close to the prescribed\n         * standard. The standard assumes that the text will have a black\n         * background. These colors are set as inline styles on the SPAN tags.\n         *\n         * Another option is to set `use_classes: true` in the options argument.\n         * This will instead set classes on the spans so the colors can be set via\n         * CSS. The class names used are of the format `ansi-*-fg/bg` and\n         * `ansi-bright-*-fg/bg` where `*` is the color name,\n         * i.e black/red/green/yellow/blue/magenta/cyan/white.\n         *\n         * @name Anser.ansiToHtml\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed to the ansiToHTML method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToHtml\",\n        value: function ansiToHtml(txt, options) {\n            return new Anser().ansiToHtml(txt, options);\n        }\n\n        /**\n         * Anser.ansiToJson\n         * Converts ANSI input into JSON output.\n         *\n         * @name Anser.ansiToJson\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed to the ansiToHTML method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToJson\",\n        value: function ansiToJson(txt, options) {\n            return new Anser().ansiToJson(txt, options);\n        }\n\n        /**\n         * Anser.ansiToText\n         * Converts ANSI input into text output.\n         *\n         * @name Anser.ansiToText\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The text output.\n         */\n\n    }, {\n        key: \"ansiToText\",\n        value: function ansiToText(txt) {\n            return new Anser().ansiToText(txt);\n        }\n\n        /**\n         * Anser\n         * The `Anser` class.\n         *\n         * @name Anser\n         * @function\n         * @returns {Anser}\n         */\n\n    }]);\n\n    function Anser() {\n        _classCallCheck(this, Anser);\n\n        this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;\n        this.bright = 0;\n    }\n\n    /**\n     * setupPalette\n     * Sets up the palette.\n     *\n     * @name setupPalette\n     * @function\n     */\n\n\n    _createClass(Anser, [{\n        key: \"setupPalette\",\n        value: function setupPalette() {\n            this.PALETTE_COLORS = [];\n\n            // Index 0..15 : System color\n            for (var i = 0; i < 2; ++i) {\n                for (var j = 0; j < 8; ++j) {\n                    this.PALETTE_COLORS.push(ANSI_COLORS[i][j].color);\n                }\n            }\n\n            // Index 16..231 : RGB 6x6x6\n            // https://gist.github.com/jasonm23/2868981#file-xterm-256color-yaml\n            var levels = [0, 95, 135, 175, 215, 255];\n            var format = function format(r, g, b) {\n                return levels[r] + \", \" + levels[g] + \", \" + levels[b];\n            };\n            var r = void 0,\n                g = void 0,\n                b = void 0;\n            for (var _r = 0; _r < 6; ++_r) {\n                for (var _g = 0; _g < 6; ++_g) {\n                    for (var _b = 0; _b < 6; ++_b) {\n                        this.PALETTE_COLORS.push(format(_r, _g, _b));\n                    }\n                }\n            }\n\n            // Index 232..255 : Grayscale\n            var level = 8;\n            for (var _i = 0; _i < 24; ++_i, level += 10) {\n                this.PALETTE_COLORS.push(format(level, level, level));\n            }\n        }\n\n        /**\n         * escapeForHtml\n         * Escapes the input text.\n         *\n         * @name escapeForHtml\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The escpaed HTML output.\n         */\n\n    }, {\n        key: \"escapeForHtml\",\n        value: function escapeForHtml(txt) {\n            return txt.replace(/[&<>]/gm, function (str) {\n                return str == \"&\" ? \"&amp;\" : str == \"<\" ? \"&lt;\" : str == \">\" ? \"&gt;\" : \"\";\n            });\n        }\n\n        /**\n         * linkify\n         * Adds HTML link elements.\n         *\n         * @name linkify\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The HTML output containing link elements.\n         */\n\n    }, {\n        key: \"linkify\",\n        value: function linkify(txt) {\n            return txt.replace(/(https?:\\/\\/[^\\s]+)/gm, function (str) {\n                return \"<a href=\\\"\" + str + \"\\\">\" + str + \"</a>\";\n            });\n        }\n\n        /**\n         * ansiToHtml\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToHtml\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed ot the `process` method.\n         * @returns {String} The HTML output.\n         */\n\n    }, {\n        key: \"ansiToHtml\",\n        value: function ansiToHtml(txt, options) {\n            return this.process(txt, options, true);\n        }\n\n        /**\n         * ansiToJson\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToJson\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options The options passed ot the `process` method.\n         * @returns {String} The JSON output.\n         */\n\n    }, {\n        key: \"ansiToJson\",\n        value: function ansiToJson(txt, options) {\n            options = options || {};\n            options.json = true;\n            options.clearLine = false;\n            return this.process(txt, options, true);\n        }\n\n        /**\n         * ansiToText\n         * Converts ANSI input into HTML output.\n         *\n         * @name ansiToText\n         * @function\n         * @param {String} txt The input text.\n         * @returns {String} The text output.\n         */\n\n    }, {\n        key: \"ansiToText\",\n        value: function ansiToText(txt) {\n            return this.process(txt, {}, false);\n        }\n\n        /**\n         * process\n         * Processes the input.\n         *\n         * @name process\n         * @function\n         * @param {String} txt The input text.\n         * @param {Object} options An object passed to `processChunk` method, extended with:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup\n         */\n\n    }, {\n        key: \"process\",\n        value: function process(txt, options, markup) {\n            var _this = this;\n\n            var self = this;\n            var raw_text_chunks = txt.split(/\\033\\[/);\n            var first_chunk = raw_text_chunks.shift(); // the first chunk is not the result of the split\n\n            if (options === undefined || options === null) {\n                options = {};\n            }\n            options.clearLine = /\\r/.test(txt); // check for Carriage Return\n            var color_chunks = raw_text_chunks.map(function (chunk) {\n                return _this.processChunk(chunk, options, markup);\n            });\n\n            if (options && options.json) {\n                var first = self.processChunkJson(\"\");\n                first.content = first_chunk;\n                first.clearLine = options.clearLine;\n                color_chunks.unshift(first);\n                if (options.remove_empty) {\n                    color_chunks = color_chunks.filter(function (c) {\n                        return !c.isEmpty();\n                    });\n                }\n                return color_chunks;\n            } else {\n                color_chunks.unshift(first_chunk);\n            }\n\n            return color_chunks.join(\"\");\n        }\n\n        /**\n         * processChunkJson\n         * Processes the current chunk into json output.\n         *\n         * @name processChunkJson\n         * @function\n         * @param {String} text The input text.\n         * @param {Object} options An object containing the following fields:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup If false, the colors will not be parsed.\n         * @return {Object} The result object:\n         *\n         *  - `content` (String): The text.\n         *  - `fg` (String|null): The foreground color.\n         *  - `bg` (String|null): The background color.\n         *  - `fg_truecolor` (String|null): The foreground true color (if 16m color is enabled).\n         *  - `bg_truecolor` (String|null): The background true color (if 16m color is enabled).\n         *  - `clearLine` (Boolean): `true` if a carriageReturn \\r was fount at end of line.\n         *  - `was_processed` (Bolean): `true` if the colors were processed, `false` otherwise.\n         *  - `isEmpty` (Function): A function returning `true` if the content is empty, or `false` otherwise.\n         *\n         */\n\n    }, {\n        key: \"processChunkJson\",\n        value: function processChunkJson(text, options, markup) {\n\n            // Are we using classes or styles?\n            options = typeof options == \"undefined\" ? {} : options;\n            var use_classes = options.use_classes = typeof options.use_classes != \"undefined\" && options.use_classes;\n            var key = options.key = use_classes ? \"class\" : \"color\";\n\n            var result = {\n                content: text,\n                fg: null,\n                bg: null,\n                fg_truecolor: null,\n                bg_truecolor: null,\n                clearLine: options.clearLine,\n                decoration: null,\n                was_processed: false,\n                isEmpty: function isEmpty() {\n                    return !result.content;\n                }\n            };\n\n            // Each \"chunk\" is the text after the CSI (ESC + \"[\") and before the next CSI/EOF.\n            //\n            // This regex matches four groups within a chunk.\n            //\n            // The first and third groups match code type.\n            // We supported only SGR command. It has empty first group and \"m\" in third.\n            //\n            // The second group matches all of the number+semicolon command sequences\n            // before the \"m\" (or other trailing) character.\n            // These are the graphics or SGR commands.\n            //\n            // The last group is the text (including newlines) that is colored by\n            // the other group\"s commands.\n            var matches = text.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);\n\n            if (!matches) return result;\n\n            var orig_txt = result.content = matches[4];\n            var nums = matches[2].split(\";\");\n\n            // We currently support only \"SGR\" (Select Graphic Rendition)\n            // Simply ignore if not a SGR command.\n            if (matches[1] !== \"\" || matches[3] !== \"m\") {\n                return result;\n            }\n\n            if (!markup) {\n                return result;\n            }\n\n            var self = this;\n\n            self.decoration = null;\n\n            while (nums.length > 0) {\n                var num_str = nums.shift();\n                var num = parseInt(num_str);\n\n                if (isNaN(num) || num === 0) {\n                    self.fg = self.bg = self.decoration = null;\n                } else if (num === 1) {\n                    self.decoration = \"bold\";\n                } else if (num === 2) {\n                    self.decoration = \"dim\";\n                    // Enable code 2 to get string\n                } else if (num == 3) {\n                    self.decoration = \"italic\";\n                } else if (num == 4) {\n                    self.decoration = \"underline\";\n                } else if (num == 5) {\n                    self.decoration = \"blink\";\n                } else if (num === 7) {\n                    self.decoration = \"reverse\";\n                } else if (num === 8) {\n                    self.decoration = \"hidden\";\n                    // Enable code 9 to get strikethrough\n                } else if (num === 9) {\n                    self.decoration = \"strikethrough\";\n                } else if (num == 39) {\n                    self.fg = null;\n                } else if (num == 49) {\n                    self.bg = null;\n                    // Foreground color\n                } else if (num >= 30 && num < 38) {\n                    self.fg = ANSI_COLORS[0][num % 10][key];\n                    // Foreground bright color\n                } else if (num >= 90 && num < 98) {\n                    self.fg = ANSI_COLORS[1][num % 10][key];\n                    // Background color\n                } else if (num >= 40 && num < 48) {\n                    self.bg = ANSI_COLORS[0][num % 10][key];\n                    // Background bright color\n                } else if (num >= 100 && num < 108) {\n                    self.bg = ANSI_COLORS[1][num % 10][key];\n                } else if (num === 38 || num === 48) {\n                    // extend color (38=fg, 48=bg)\n                    var is_foreground = num === 38;\n                    if (nums.length >= 1) {\n                        var mode = nums.shift();\n                        if (mode === \"5\" && nums.length >= 1) {\n                            // palette color\n                            var palette_index = parseInt(nums.shift());\n                            if (palette_index >= 0 && palette_index <= 255) {\n                                if (!use_classes) {\n                                    if (!this.PALETTE_COLORS) {\n                                        self.setupPalette();\n                                    }\n                                    if (is_foreground) {\n                                        self.fg = this.PALETTE_COLORS[palette_index];\n                                    } else {\n                                        self.bg = this.PALETTE_COLORS[palette_index];\n                                    }\n                                } else {\n                                    var klass = palette_index >= 16 ? \"ansi-palette-\" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8][\"class\"];\n                                    if (is_foreground) {\n                                        self.fg = klass;\n                                    } else {\n                                        self.bg = klass;\n                                    }\n                                }\n                            }\n                        } else if (mode === \"2\" && nums.length >= 3) {\n                            // true color\n                            var r = parseInt(nums.shift());\n                            var g = parseInt(nums.shift());\n                            var b = parseInt(nums.shift());\n                            if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {\n                                var color = r + \", \" + g + \", \" + b;\n                                if (!use_classes) {\n                                    if (is_foreground) {\n                                        self.fg = color;\n                                    } else {\n                                        self.bg = color;\n                                    }\n                                } else {\n                                    if (is_foreground) {\n                                        self.fg = \"ansi-truecolor\";\n                                        self.fg_truecolor = color;\n                                    } else {\n                                        self.bg = \"ansi-truecolor\";\n                                        self.bg_truecolor = color;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (self.fg === null && self.bg === null && self.decoration === null) {\n                return result;\n            } else {\n                var styles = [];\n                var classes = [];\n                var data = {};\n\n                result.fg = self.fg;\n                result.bg = self.bg;\n                result.fg_truecolor = self.fg_truecolor;\n                result.bg_truecolor = self.bg_truecolor;\n                result.decoration = self.decoration;\n                result.was_processed = true;\n\n                return result;\n            }\n        }\n\n        /**\n         * processChunk\n         * Processes the current chunk of text.\n         *\n         * @name processChunk\n         * @function\n         * @param {String} text The input text.\n         * @param {Object} options An object containing the following fields:\n         *\n         *  - `json` (Boolean): If `true`, the result will be an object.\n         *  - `use_classes` (Boolean): If `true`, HTML classes will be appended to the HTML output.\n         *\n         * @param {Boolean} markup If false, the colors will not be parsed.\n         * @return {Object|String} The result (object if `json` is wanted back or string otherwise).\n         */\n\n    }, {\n        key: \"processChunk\",\n        value: function processChunk(text, options, markup) {\n            var _this2 = this;\n\n            var self = this;\n            options = options || {};\n            var jsonChunk = this.processChunkJson(text, options, markup);\n\n            if (options.json) {\n                return jsonChunk;\n            }\n            if (jsonChunk.isEmpty()) {\n                return \"\";\n            }\n            if (!jsonChunk.was_processed) {\n                return jsonChunk.content;\n            }\n\n            var use_classes = options.use_classes;\n\n            var styles = [];\n            var classes = [];\n            var data = {};\n            var render_data = function render_data(data) {\n                var fragments = [];\n                var key = void 0;\n                for (key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        fragments.push(\"data-\" + key + \"=\\\"\" + _this2.escapeForHtml(data[key]) + \"\\\"\");\n                    }\n                }\n                return fragments.length > 0 ? \" \" + fragments.join(\" \") : \"\";\n            };\n\n            if (jsonChunk.fg) {\n                if (use_classes) {\n                    classes.push(jsonChunk.fg + \"-fg\");\n                    if (jsonChunk.fg_truecolor !== null) {\n                        data[\"ansi-truecolor-fg\"] = jsonChunk.fg_truecolor;\n                        jsonChunk.fg_truecolor = null;\n                    }\n                } else {\n                    styles.push(\"color:rgb(\" + jsonChunk.fg + \")\");\n                }\n            }\n\n            if (jsonChunk.bg) {\n                if (use_classes) {\n                    classes.push(jsonChunk.bg + \"-bg\");\n                    if (jsonChunk.bg_truecolor !== null) {\n                        data[\"ansi-truecolor-bg\"] = jsonChunk.bg_truecolor;\n                        jsonChunk.bg_truecolor = null;\n                    }\n                } else {\n                    styles.push(\"background-color:rgb(\" + jsonChunk.bg + \")\");\n                }\n            }\n\n            if (jsonChunk.decoration) {\n                if (use_classes) {\n                    classes.push(\"ansi-\" + jsonChunk.decoration);\n                } else if (jsonChunk.decoration === \"bold\") {\n                    styles.push(\"font-weight:bold\");\n                } else if (jsonChunk.decoration === \"dim\") {\n                    styles.push(\"opacity:0.5\");\n                } else if (jsonChunk.decoration === \"italic\") {\n                    styles.push(\"font-style:italic\");\n                    // underline and blink are treated bellow\n                } else if (jsonChunk.decoration === \"reverse\") {\n                    styles.push(\"filter:invert(100%)\");\n                } else if (jsonChunk.decoration === \"hidden\") {\n                    styles.push(\"visibility:hidden\");\n                } else if (jsonChunk.decoration === \"strikethrough\") {\n                    styles.push(\"text-decoration:line-through\");\n                } else {\n                    styles.push(\"text-decoration:\" + jsonChunk.decoration);\n                }\n            }\n\n            if (use_classes) {\n                return \"<span class=\\\"\" + classes.join(\" \") + \"\\\"\" + render_data(data) + \">\" + jsonChunk.content + \"</span>\";\n            } else {\n                return \"<span style=\\\"\" + styles.join(\";\") + \"\\\"\" + render_data(data) + \">\" + jsonChunk.content + \"</span>\";\n            }\n        }\n    }]);\n\n    return Anser;\n}();\n\n;\n\nmodule.exports = Anser;"]},"metadata":{},"sourceType":"script"}