{"ast":null,"code":"'use strict';\n\nexports.tokenize = tokenizeMathFenced;\nexports.concrete = true;\n\nvar prefixSize = require('micromark/dist/util/prefix-size');\n\nvar createSpace = require('micromark/dist/tokenize/factory-space');\n\nfunction tokenizeMathFenced(effects, ok, nok) {\n  var self = this;\n  var initialPrefix = prefixSize(this.events, 'linePrefix');\n  var sizeOpen = 0;\n  return start;\n\n  function start(code) {\n    /* istanbul ignore if - handled by mm */\n    if (code !== 36) throw new Error('expected `$`');\n    effects.enter('mathFlow');\n    effects.enter('mathFlowFence');\n    effects.enter('mathFlowFenceSequence');\n    return sequenceOpen(code);\n  }\n\n  function sequenceOpen(code) {\n    if (code === 36) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n\n    effects.exit('mathFlowFenceSequence');\n    return sizeOpen < 2 ? nok(code) : createSpace(effects, metaOpen, 'whitespace')(code);\n  }\n\n  function metaOpen(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      return openAfter(code);\n    }\n\n    effects.enter('mathFlowFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n\n  function meta(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      effects.exit('chunkString');\n      effects.exit('mathFlowFenceMeta');\n      return openAfter(code);\n    }\n\n    if (code === 36) return nok(code);\n    effects.consume(code);\n    return meta;\n  }\n\n  function openAfter(code) {\n    effects.exit('mathFlowFence');\n    return self.interrupt ? ok(code) : content(code);\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code);\n    }\n\n    if (code === -5 || code === -4 || code === -3) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return effects.attempt({\n        tokenize: tokenizeClosingFence,\n        partial: true\n      }, after, initialPrefix ? createSpace(effects, content, 'linePrefix', initialPrefix + 1) : content);\n    }\n\n    effects.enter('mathFlowValue');\n    return contentContinue(code);\n  }\n\n  function contentContinue(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      effects.exit('mathFlowValue');\n      return content(code);\n    }\n\n    effects.consume(code);\n    return contentContinue;\n  }\n\n  function after(code) {\n    effects.exit('mathFlow');\n    return ok(code);\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0;\n    return createSpace(effects, closingPrefixAfter, 'linePrefix', 4);\n\n    function closingPrefixAfter(code) {\n      effects.enter('mathFlowFence');\n      effects.enter('mathFlowFenceSequence');\n      return closingSequence(code);\n    }\n\n    function closingSequence(code) {\n      if (code === 36) {\n        effects.consume(code);\n        size++;\n        return closingSequence;\n      }\n\n      if (size < sizeOpen) return nok(code);\n      effects.exit('mathFlowFenceSequence');\n      return createSpace(effects, closingSequenceEnd, 'whitespace')(code);\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || code === -5 || code === -4 || code === -3) {\n        effects.exit('mathFlowFence');\n        return ok(code);\n      }\n\n      return nok(code);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/abrahimmahmud/IdeaProjects/HeartDiseaseDiagnosisFrontEnd/node_modules/micromark-extension-math/lib/tokenize-math-flow.js"],"names":["exports","tokenize","tokenizeMathFenced","concrete","prefixSize","require","createSpace","effects","ok","nok","self","initialPrefix","events","sizeOpen","start","code","Error","enter","sequenceOpen","consume","exit","metaOpen","openAfter","contentType","meta","interrupt","content","after","attempt","tokenizeClosingFence","partial","contentContinue","size","closingPrefixAfter","closingSequence","closingSequenceEnd"],"mappings":"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","sourcesContent":["'use strict'\n\nexports.tokenize = tokenizeMathFenced\nexports.concrete = true\n\nvar prefixSize = require('micromark/dist/util/prefix-size')\nvar createSpace = require('micromark/dist/tokenize/factory-space')\n\nfunction tokenizeMathFenced(effects, ok, nok) {\n  var self = this\n  var initialPrefix = prefixSize(this.events, 'linePrefix')\n  var sizeOpen = 0\n\n  return start\n\n  function start(code) {\n    /* istanbul ignore if - handled by mm */\n    if (code !== 36) throw new Error('expected `$`')\n\n    effects.enter('mathFlow')\n    effects.enter('mathFlowFence')\n    effects.enter('mathFlowFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  function sequenceOpen(code) {\n    if (code === 36) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('mathFlowFenceSequence')\n    return sizeOpen < 2\n      ? nok(code)\n      : createSpace(effects, metaOpen, 'whitespace')(code)\n  }\n\n  function metaOpen(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      return openAfter(code)\n    }\n\n    effects.enter('mathFlowFenceMeta')\n    effects.enter('chunkString', {contentType: 'string'})\n    return meta(code)\n  }\n\n  function meta(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      effects.exit('chunkString')\n      effects.exit('mathFlowFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 36) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n\n  function openAfter(code) {\n    effects.exit('mathFlowFence')\n    return self.interrupt ? ok(code) : content(code)\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (code === -5 || code === -4 || code === -3) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(\n        {tokenize: tokenizeClosingFence, partial: true},\n        after,\n        initialPrefix\n          ? createSpace(effects, content, 'linePrefix', initialPrefix + 1)\n          : content\n      )\n    }\n\n    effects.enter('mathFlowValue')\n    return contentContinue(code)\n  }\n\n  function contentContinue(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      effects.exit('mathFlowValue')\n      return content(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n\n  function after(code) {\n    effects.exit('mathFlow')\n    return ok(code)\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0\n\n    return createSpace(effects, closingPrefixAfter, 'linePrefix', 4)\n\n    function closingPrefixAfter(code) {\n      effects.enter('mathFlowFence')\n      effects.enter('mathFlowFenceSequence')\n      return closingSequence(code)\n    }\n\n    function closingSequence(code) {\n      if (code === 36) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('mathFlowFenceSequence')\n      return createSpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || code === -5 || code === -4 || code === -3) {\n        effects.exit('mathFlowFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}