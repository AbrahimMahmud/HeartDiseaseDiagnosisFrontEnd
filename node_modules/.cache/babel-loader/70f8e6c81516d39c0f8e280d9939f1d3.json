{"ast":null,"code":"'use strict';\n\nmodule.exports = longestStreak; // Get the count of the longest repeating streak of `character` in `value`.\n\nfunction longestStreak(value, character) {\n  var count = 0;\n  var maximum = 0;\n  var expected;\n  var index;\n\n  if (typeof character !== 'string' || character.length !== 1) {\n    throw new Error('Expected character');\n  }\n\n  value = String(value);\n  index = value.indexOf(character);\n  expected = index;\n\n  while (index !== -1) {\n    count++;\n\n    if (index === expected) {\n      if (count > maximum) {\n        maximum = count;\n      }\n    } else {\n      count = 1;\n    }\n\n    expected = index + 1;\n    index = value.indexOf(character, expected);\n  }\n\n  return maximum;\n}","map":{"version":3,"sources":["/Users/abrahimmahmud/IdeaProjects/HeartDiseaseDiagnosisFrontEnd/node_modules/longest-streak/index.js"],"names":["module","exports","longestStreak","value","character","count","maximum","expected","index","length","Error","String","indexOf"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,aAAjB,C,CAEA;;AACA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAyC;AACvC,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAJ;;AAEA,MAAI,OAAOJ,SAAP,KAAqB,QAArB,IAAiCA,SAAS,CAACK,MAAV,KAAqB,CAA1D,EAA6D;AAC3D,UAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAEDP,EAAAA,KAAK,GAAGQ,MAAM,CAACR,KAAD,CAAd;AACAK,EAAAA,KAAK,GAAGL,KAAK,CAACS,OAAN,CAAcR,SAAd,CAAR;AACAG,EAAAA,QAAQ,GAAGC,KAAX;;AAEA,SAAOA,KAAK,KAAK,CAAC,CAAlB,EAAqB;AACnBH,IAAAA,KAAK;;AAEL,QAAIG,KAAK,KAAKD,QAAd,EAAwB;AACtB,UAAIF,KAAK,GAAGC,OAAZ,EAAqB;AACnBA,QAAAA,OAAO,GAAGD,KAAV;AACD;AACF,KAJD,MAIO;AACLA,MAAAA,KAAK,GAAG,CAAR;AACD;;AAEDE,IAAAA,QAAQ,GAAGC,KAAK,GAAG,CAAnB;AACAA,IAAAA,KAAK,GAAGL,KAAK,CAACS,OAAN,CAAcR,SAAd,EAAyBG,QAAzB,CAAR;AACD;;AAED,SAAOD,OAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = longestStreak\n\n// Get the count of the longest repeating streak of `character` in `value`.\nfunction longestStreak(value, character) {\n  var count = 0\n  var maximum = 0\n  var expected\n  var index\n\n  if (typeof character !== 'string' || character.length !== 1) {\n    throw new Error('Expected character')\n  }\n\n  value = String(value)\n  index = value.indexOf(character)\n  expected = index\n\n  while (index !== -1) {\n    count++\n\n    if (index === expected) {\n      if (count > maximum) {\n        maximum = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + 1\n    index = value.indexOf(character, expected)\n  }\n\n  return maximum\n}\n"]},"metadata":{},"sourceType":"script"}