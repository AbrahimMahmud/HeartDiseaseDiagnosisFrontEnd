{"ast":null,"code":"const visit = require('unist-util-visit');\n\nconst katex = require('katex').renderToString;\n\nconst unified = require('unified');\n\nconst parse = require('rehype-parse');\n\nconst toText = require('hast-util-to-text');\n\nmodule.exports = rehypeKatex;\nconst assign = Object.assign;\nconst parseHtml = unified().use(parse, {\n  fragment: true,\n  position: false\n});\nconst source = 'rehype-katex';\n\nfunction rehypeKatex(options) {\n  const settings = options || {};\n  const throwOnError = settings.throwOnError || false;\n  return transformMath;\n\n  function transformMath(tree, file) {\n    visit(tree, 'element', onelement);\n\n    function onelement(element) {\n      const classes = element.properties.className || [];\n      const inline = classes.includes('math-inline');\n      const displayMode = classes.includes('math-display');\n\n      if (!inline && !displayMode) {\n        return;\n      }\n\n      const value = toText(element);\n      let result;\n\n      try {\n        result = katex(value, assign({}, settings, {\n          displayMode: displayMode,\n          throwOnError: true\n        }));\n      } catch (error) {\n        const fn = throwOnError ? 'fail' : 'message';\n        const origin = [source, error.name.toLowerCase()].join(':');\n        file[fn](error.message, element.position, origin);\n        result = katex(value, assign({}, settings, {\n          displayMode: displayMode,\n          throwOnError: false,\n          strict: 'ignore'\n        }));\n      }\n\n      element.children = parseHtml.parse(result).children;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/abrahimmahmud/IdeaProjects/HeartDiseaseDiagnosisFrontEnd/node_modules/rehype-katex/index.js"],"names":["visit","require","katex","renderToString","unified","parse","toText","module","exports","rehypeKatex","assign","Object","parseHtml","use","fragment","position","source","options","settings","throwOnError","transformMath","tree","file","onelement","element","classes","properties","className","inline","includes","displayMode","value","result","error","fn","origin","name","toLowerCase","join","message","strict","children"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiBE,cAA/B;;AACA,MAAMC,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,mBAAD,CAAtB;;AAEAM,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AAEA,MAAMC,MAAM,GAAGC,MAAM,CAACD,MAAtB;AAEA,MAAME,SAAS,GAAGR,OAAO,GAAGS,GAAV,CAAcR,KAAd,EAAqB;AAACS,EAAAA,QAAQ,EAAE,IAAX;AAAiBC,EAAAA,QAAQ,EAAE;AAA3B,CAArB,CAAlB;AAEA,MAAMC,MAAM,GAAG,cAAf;;AAEA,SAASP,WAAT,CAAqBQ,OAArB,EAA8B;AAC5B,QAAMC,QAAQ,GAAGD,OAAO,IAAI,EAA5B;AACA,QAAME,YAAY,GAAGD,QAAQ,CAACC,YAAT,IAAyB,KAA9C;AAEA,SAAOC,aAAP;;AAEA,WAASA,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AACjCtB,IAAAA,KAAK,CAACqB,IAAD,EAAO,SAAP,EAAkBE,SAAlB,CAAL;;AAEA,aAASA,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,YAAMC,OAAO,GAAGD,OAAO,CAACE,UAAR,CAAmBC,SAAnB,IAAgC,EAAhD;AACA,YAAMC,MAAM,GAAGH,OAAO,CAACI,QAAR,CAAiB,aAAjB,CAAf;AACA,YAAMC,WAAW,GAAGL,OAAO,CAACI,QAAR,CAAiB,cAAjB,CAApB;;AAEA,UAAI,CAACD,MAAD,IAAW,CAACE,WAAhB,EAA6B;AAC3B;AACD;;AAED,YAAMC,KAAK,GAAGzB,MAAM,CAACkB,OAAD,CAApB;AAEA,UAAIQ,MAAJ;;AAEA,UAAI;AACFA,QAAAA,MAAM,GAAG9B,KAAK,CACZ6B,KADY,EAEZrB,MAAM,CAAC,EAAD,EAAKQ,QAAL,EAAe;AAACY,UAAAA,WAAW,EAAEA,WAAd;AAA2BX,UAAAA,YAAY,EAAE;AAAzC,SAAf,CAFM,CAAd;AAID,OALD,CAKE,OAAOc,KAAP,EAAc;AACd,cAAMC,EAAE,GAAGf,YAAY,GAAG,MAAH,GAAY,SAAnC;AACA,cAAMgB,MAAM,GAAG,CAACnB,MAAD,EAASiB,KAAK,CAACG,IAAN,CAAWC,WAAX,EAAT,EAAmCC,IAAnC,CAAwC,GAAxC,CAAf;AAEAhB,QAAAA,IAAI,CAACY,EAAD,CAAJ,CAASD,KAAK,CAACM,OAAf,EAAwBf,OAAO,CAACT,QAAhC,EAA0CoB,MAA1C;AAEAH,QAAAA,MAAM,GAAG9B,KAAK,CACZ6B,KADY,EAEZrB,MAAM,CAAC,EAAD,EAAKQ,QAAL,EAAe;AACnBY,UAAAA,WAAW,EAAEA,WADM;AAEnBX,UAAAA,YAAY,EAAE,KAFK;AAGnBqB,UAAAA,MAAM,EAAE;AAHW,SAAf,CAFM,CAAd;AAQD;;AAEDhB,MAAAA,OAAO,CAACiB,QAAR,GAAmB7B,SAAS,CAACP,KAAV,CAAgB2B,MAAhB,EAAwBS,QAA3C;AACD;AACF;AACF","sourcesContent":["const visit = require('unist-util-visit')\nconst katex = require('katex').renderToString\nconst unified = require('unified')\nconst parse = require('rehype-parse')\nconst toText = require('hast-util-to-text')\n\nmodule.exports = rehypeKatex\n\nconst assign = Object.assign\n\nconst parseHtml = unified().use(parse, {fragment: true, position: false})\n\nconst source = 'rehype-katex'\n\nfunction rehypeKatex(options) {\n  const settings = options || {}\n  const throwOnError = settings.throwOnError || false\n\n  return transformMath\n\n  function transformMath(tree, file) {\n    visit(tree, 'element', onelement)\n\n    function onelement(element) {\n      const classes = element.properties.className || []\n      const inline = classes.includes('math-inline')\n      const displayMode = classes.includes('math-display')\n\n      if (!inline && !displayMode) {\n        return\n      }\n\n      const value = toText(element)\n\n      let result\n\n      try {\n        result = katex(\n          value,\n          assign({}, settings, {displayMode: displayMode, throwOnError: true})\n        )\n      } catch (error) {\n        const fn = throwOnError ? 'fail' : 'message'\n        const origin = [source, error.name.toLowerCase()].join(':')\n\n        file[fn](error.message, element.position, origin)\n\n        result = katex(\n          value,\n          assign({}, settings, {\n            displayMode: displayMode,\n            throwOnError: false,\n            strict: 'ignore'\n          })\n        )\n      }\n\n      element.children = parseHtml.parse(result).children\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}