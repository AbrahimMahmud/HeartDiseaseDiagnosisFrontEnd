{"ast":null,"code":"'use strict';\n\nmodule.exports = convert;\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return tagNameFactory(test);\n  }\n\n  if (test === null || test === undefined) {\n    return element;\n  }\n\n  if (typeof test === 'object') {\n    return any(test);\n  }\n\n  if (typeof test === 'function') {\n    return callFactory(test);\n  }\n\n  throw new Error('Expected function, string, or array as test');\n}\n\nfunction convertAll(tests) {\n  var length = tests.length;\n  var index = -1;\n  var results = [];\n\n  while (++index < length) {\n    results[index] = convert(tests[index]);\n  }\n\n  return results;\n}\n\nfunction any(tests) {\n  var checks = convertAll(tests);\n  var length = checks.length;\n  return matches;\n\n  function matches() {\n    var index = -1;\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n} // Utility to convert a string a tag name check.\n\n\nfunction tagNameFactory(test) {\n  return tagName;\n\n  function tagName(node) {\n    return element(node) && node.tagName === test;\n  }\n} // Utility to convert a function check.\n\n\nfunction callFactory(test) {\n  return call;\n\n  function call(node) {\n    return element(node) && Boolean(test.apply(this, arguments));\n  }\n} // Utility to return true if this is an element.\n\n\nfunction element(node) {\n  return node && typeof node === 'object' && node.type === 'element' && typeof node.tagName === 'string';\n}","map":{"version":3,"sources":["/Users/abrahimmahmud/IdeaProjects/HeartDiseaseDiagnosisFrontEnd/node_modules/hast-util-is-element/convert.js"],"names":["module","exports","convert","test","tagNameFactory","undefined","element","any","callFactory","Error","convertAll","tests","length","index","results","checks","matches","apply","arguments","tagName","node","call","Boolean","type"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOC,cAAc,CAACD,IAAD,CAArB;AACD;;AAED,MAAIA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKE,SAA9B,EAAyC;AACvC,WAAOC,OAAP;AACD;;AAED,MAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOI,GAAG,CAACJ,IAAD,CAAV;AACD;;AAED,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAOK,WAAW,CAACL,IAAD,CAAlB;AACD;;AAED,QAAM,IAAIM,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,SAAO,EAAED,KAAF,GAAUD,MAAjB,EAAyB;AACvBE,IAAAA,OAAO,CAACD,KAAD,CAAP,GAAiBX,OAAO,CAACS,KAAK,CAACE,KAAD,CAAN,CAAxB;AACD;;AAED,SAAOC,OAAP;AACD;;AAED,SAASP,GAAT,CAAaI,KAAb,EAAoB;AAClB,MAAII,MAAM,GAAGL,UAAU,CAACC,KAAD,CAAvB;AACA,MAAIC,MAAM,GAAGG,MAAM,CAACH,MAApB;AAEA,SAAOI,OAAP;;AAEA,WAASA,OAAT,GAAmB;AACjB,QAAIH,KAAK,GAAG,CAAC,CAAb;;AAEA,WAAO,EAAEA,KAAF,GAAUD,MAAjB,EAAyB;AACvB,UAAIG,MAAM,CAACF,KAAD,CAAN,CAAcI,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAJ,EAA0C;AACxC,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;AACF,C,CAED;;;AACA,SAASd,cAAT,CAAwBD,IAAxB,EAA8B;AAC5B,SAAOgB,OAAP;;AAEA,WAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,WAAOd,OAAO,CAACc,IAAD,CAAP,IAAiBA,IAAI,CAACD,OAAL,KAAiBhB,IAAzC;AACD;AACF,C,CAED;;;AACA,SAASK,WAAT,CAAqBL,IAArB,EAA2B;AACzB,SAAOkB,IAAP;;AAEA,WAASA,IAAT,CAAcD,IAAd,EAAoB;AAClB,WAAOd,OAAO,CAACc,IAAD,CAAP,IAAiBE,OAAO,CAACnB,IAAI,CAACc,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAD,CAA/B;AACD;AACF,C,CAED;;;AACA,SAASZ,OAAT,CAAiBc,IAAjB,EAAuB;AACrB,SACEA,IAAI,IACJ,OAAOA,IAAP,KAAgB,QADhB,IAEAA,IAAI,CAACG,IAAL,KAAc,SAFd,IAGA,OAAOH,IAAI,CAACD,OAAZ,KAAwB,QAJ1B;AAMD","sourcesContent":["'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return tagNameFactory(test)\n  }\n\n  if (test === null || test === undefined) {\n    return element\n  }\n\n  if (typeof test === 'object') {\n    return any(test)\n  }\n\n  if (typeof test === 'function') {\n    return callFactory(test)\n  }\n\n  throw new Error('Expected function, string, or array as test')\n}\n\nfunction convertAll(tests) {\n  var length = tests.length\n  var index = -1\n  var results = []\n\n  while (++index < length) {\n    results[index] = convert(tests[index])\n  }\n\n  return results\n}\n\nfunction any(tests) {\n  var checks = convertAll(tests)\n  var length = checks.length\n\n  return matches\n\n  function matches() {\n    var index = -1\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string a tag name check.\nfunction tagNameFactory(test) {\n  return tagName\n\n  function tagName(node) {\n    return element(node) && node.tagName === test\n  }\n}\n\n// Utility to convert a function check.\nfunction callFactory(test) {\n  return call\n\n  function call(node) {\n    return element(node) && Boolean(test.apply(this, arguments))\n  }\n}\n\n// Utility to return true if this is an element.\nfunction element(node) {\n  return (\n    node &&\n    typeof node === 'object' &&\n    node.type === 'element' &&\n    typeof node.tagName === 'string'\n  )\n}\n"]},"metadata":{},"sourceType":"script"}