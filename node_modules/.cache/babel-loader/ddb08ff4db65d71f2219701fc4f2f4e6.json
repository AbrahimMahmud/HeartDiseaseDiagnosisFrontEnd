{"ast":null,"code":"'use strict';\n\nvar convert = require('unist-util-is/convert');\n\nmodule.exports = findAfter;\n\nfunction findAfter(parent, index, test) {\n  var is = convert(test);\n  var children;\n  var child;\n  var length;\n\n  if (!parent || !parent.type || !parent.children) {\n    throw new Error('Expected parent node');\n  }\n\n  children = parent.children;\n  length = children.length;\n\n  if (index && index.type) {\n    index = children.indexOf(index);\n  }\n\n  if (isNaN(index) || index < 0 || index === Infinity) {\n    throw new Error('Expected positive finite index or child node');\n  }\n\n  while (++index < length) {\n    child = children[index];\n\n    if (is(child, index, parent)) {\n      return child;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/abrahimmahmud/IdeaProjects/HeartDiseaseDiagnosisFrontEnd/node_modules/unist-util-find-after/index.js"],"names":["convert","require","module","exports","findAfter","parent","index","test","is","children","child","length","type","Error","indexOf","isNaN","Infinity"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AAEA,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACtC,MAAIC,EAAE,GAAGR,OAAO,CAACO,IAAD,CAAhB;AACA,MAAIE,QAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAI,CAACN,MAAD,IAAW,CAACA,MAAM,CAACO,IAAnB,IAA2B,CAACP,MAAM,CAACI,QAAvC,EAAiD;AAC/C,UAAM,IAAII,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAEDJ,EAAAA,QAAQ,GAAGJ,MAAM,CAACI,QAAlB;AACAE,EAAAA,MAAM,GAAGF,QAAQ,CAACE,MAAlB;;AAEA,MAAIL,KAAK,IAAIA,KAAK,CAACM,IAAnB,EAAyB;AACvBN,IAAAA,KAAK,GAAGG,QAAQ,CAACK,OAAT,CAAiBR,KAAjB,CAAR;AACD;;AAED,MAAIS,KAAK,CAACT,KAAD,CAAL,IAAgBA,KAAK,GAAG,CAAxB,IAA6BA,KAAK,KAAKU,QAA3C,EAAqD;AACnD,UAAM,IAAIH,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAO,EAAEP,KAAF,GAAUK,MAAjB,EAAyB;AACvBD,IAAAA,KAAK,GAAGD,QAAQ,CAACH,KAAD,CAAhB;;AAEA,QAAIE,EAAE,CAACE,KAAD,EAAQJ,KAAR,EAAeD,MAAf,CAAN,EAA8B;AAC5B,aAAOK,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["'use strict'\n\nvar convert = require('unist-util-is/convert')\n\nmodule.exports = findAfter\n\nfunction findAfter(parent, index, test) {\n  var is = convert(test)\n  var children\n  var child\n  var length\n\n  if (!parent || !parent.type || !parent.children) {\n    throw new Error('Expected parent node')\n  }\n\n  children = parent.children\n  length = children.length\n\n  if (index && index.type) {\n    index = children.indexOf(index)\n  }\n\n  if (isNaN(index) || index < 0 || index === Infinity) {\n    throw new Error('Expected positive finite index or child node')\n  }\n\n  while (++index < length) {\n    child = children[index]\n\n    if (is(child, index, parent)) {\n      return child\n    }\n  }\n\n  return null\n}\n"]},"metadata":{},"sourceType":"script"}